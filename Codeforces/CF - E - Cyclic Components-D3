#define _CRT_SECURE_NO_WARNINGS
#include<iostream>
#include <algorithm>
#include <bitset>
#include <complex>
#include <deque>
#include <exception>
#include <fstream>
#include <functional>
#include <iomanip>
#include <ios>
#include <iosfwd>
#include <istream>
#include <iterator>
#include <limits>
#include <list>
#include <locale>
#include <map>
#include <memory>
#include <new>
#include <numeric>
#include <ostream>
#include <queue>
#include <set>
#include <sstream>
#include <stack>
#include <stdexcept>
#include <streambuf>
#include <string>
#include <typeinfo>
#include <utility>
#include <valarray>
#include <vector>
using namespace std;
typedef long long ll;
#define rep(i,x) for(int(i)=0;(i)<(ll)(x);(i)++)
int dx[] = { 0, 0, 1, -1, 1, -1, 1, -1 };
int dy[] = { 1, -1, 0, 0, -1, 1, 1, -1 };
void fast()
{
#ifndef ONLINE_JUDGE

/*

	**    ** ** **    *********   ** ** **
	**    **          **     **   **
	**    **          *********   **
	**    **          **          **
	**    ** ** **    **          ** ** **
*/
	freopen("in.txt", "r", stdin);
	freopen("out.txt", "w", stdout);
#endif
	ios_base::sync_with_stdio(0);
	cin.tie(NULL), cout.tie(NULL);
}
const int MAX = 200000;
int n, e, from, to, cycle = 0;
vector<int>adj[MAX];
vector<vector<int>>N_connected_components;
vector<int>connected_components;
bool vis[MAX];
void dfs(int node, int p)
{
	if (vis[node])
	{
		cycle = 1;
		return;
	}
	connected_components.push_back(node);
	vis[node] = 1;
	for (int i = 0; i < adj[node].size(); i++)
	{
		int ch = adj[node][i];
		if (ch != p)
			dfs(ch, node);
	}
}
int main() {

	fast();
	cin >> n >> e;
	rep(i, e)
	{
		cin >> from >> to;
		adj[from - 1].push_back(to - 1);
		adj[to - 1].push_back(from - 1);
	}
	for (int i = 0; i < n; i++)
	{
		if (!vis[i])
		{
			connected_components.clear();
			cycle = 0;
			dfs(i, -1);
			if (cycle)
				N_connected_components.push_back(connected_components);
		}
	}
	int ans = 0;
	for (int i = 0; i < N_connected_components.size(); i++)
	{
		bool test = 1;
		for (int j = 0; j < N_connected_components[i].size(); j++)
		{
			if (adj[N_connected_components[i][j]].size() > 2)
			{
				test = 0;
				break;
			}
		}
		if (test)
			ans++;
	}
	cout << ans << endl;
	return 0;
}
