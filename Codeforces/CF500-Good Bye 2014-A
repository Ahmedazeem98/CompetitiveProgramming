#define _CRT_SECURE_NO_WARNINGS
#include<iostream>
#include <algorithm>
#include <bitset>
#include <complex>
#include <deque>
#include <exception>
#include <fstream>
#include <functional>
#include <iomanip>
#include <ios>
#include <iosfwd>
#include <istream>
#include <iterator>
#include <limits>
#include <list>
#include <locale>
#include <map>
#include <memory>
#include <new>
#include <numeric>
#include <ostream>
#include <queue>
#include <set>
#include <sstream>
#include <stack>
#include <stdexcept>
#include <streambuf>
#include <string>
#include <typeinfo>
#include <utility>
#include <valarray>
#include <vector>
using namespace std;
typedef long long ll;
#define rep(i,x) for(int(i)=0;(i)<(ll)(x);(i)++)
int dx[] = { 0, 0, 1, -1, 1, -1, 1, -1 };
int dy[] = { 1, -1, 0, 0, -1, 1, 1, -1 };
void fast()
{
#ifndef ONLINE_JUDGE

/*

	**    ** ** **    *********   ** ** **
	**    **          **     **   **
	**    **          *********   **
	**    **          **          **
	**    ** ** **    **          ** ** **
*/
	freopen("in.txt", "r", stdin);
	freopen("out.txt", "w", stdout);
#endif
	ios_base::sync_with_stdio(0);
	cin.tie(NULL), cout.tie(NULL);
}
const int MAX = 2e5 + 1;
vector<int>adj[MAX];
bool vis[MAX];
int n, x;
vector<int>v(MAX);
vector<vector<int>>g;
vector<int>cc;
void dfs(int node)
{
	if (!vis[node])
		cc.push_back(node);
	vis[node] = 1;
	rep(i, adj[node].size())
	{
		int ch = adj[node][i];
		if (!vis[ch])
			dfs(ch);
	}
}
int main() {

	fast();
	cin >> n >> x;
	rep(i, n)
		cin >> v[i];
	rep(i, n - 1)
	{
		int b = i + v[i];
		adj[i].push_back(b);
	}
	for (int i = 0; i < n - 1; i++)
	{
		if (!vis[i])
		{
			cc.clear();
			dfs(i);
			if (cc.size())
			{
				sort(cc.begin(), cc.end());
				if (binary_search(cc.begin(), cc.end(), 0))
				{
					if (binary_search(cc.begin(), cc.end(), x - 1))
					{
						return cout << "YES", 0;
					}
				}
			}
		}
	}
	cout << "NO";
	return 0;
}
