#define _CRT_SECURE_NO_WARNINGS
#include <iostream>
#include <string>
#include <vector>
#include <iomanip>
#include <set>
#include <map>
#include <numeric>
#include <bitset>
#include <sstream>
#include <iomanip>
#include <fstream>
#include <cstdlib>
#include <cstring>
#include <cstdio>
#include <cmath>
#include <deque>
#include <algorithm>
#include <iterator>
#include <utility> 
#include <stdlib.h>  //atoi
using namespace std;
typedef long long ll;
const  double PI = 3.141592654;
#define rep(i,x) for(int(i)=0;(i)<(ll)(x);(i)++)
#define all(s)      (s).begin(),(s).end()
#define allv(v)      (v).begin(),(v).end()
#define allr(v)      (v).rbegin(),(v).rend()
#define pb          push_back
#define sz          s.size()
#define ssz          ss.size()
#define vz          v.size()
//x = atoi(s.c_str())
ll gcd(ll a, ll b) { return !b ? a : gcd(b, a % b); }
ll lcm(ll a, ll b) { return (a / gcd(a, b)) * b; }
void fast()
{
	ios_base::sync_with_stdio(0);
	cin.tie(NULL), cout.tie(NULL);
}
vector<string>v;
void fill(int rp1,int rp2)
{
	string d;
	rep(i, rp2)
		d += '+';
	rep(i, rp1)
		d += '-';
	do
	{
		v.pb(d);
	}while(next_permutation(all(d)));
}
int main()
{
	fast();
	string s, ss, g;
	cin >> s >> ss;
	g = ss;
	int po1 = 0, po2 = 0;
	vector<int>actions;
	rep(i, sz)
	{
		if (s[i] == '+')
			po1++;
		else
			po1--;
	}
	int cnt = count(all(ss), '?');
	if (cnt == 0 )
	{
		int a = 0, b = 0;
		rep(i, sz)
		{
			if (s[i] == '+')
				a++;
			else
				a--;
		}
		rep(i, sz)
		{
			if (ss[i] == '+')
				b++;
			else
				b--;
		}
		if (a==b)
		cout << "1.000000000000" << endl;
		else
			cout << "0.000000000000" << endl;
		return 0;
	}
	else
	{
		double all = pow(2, cnt);
		int re1 = 0, re2 = cnt, sol = 0;
		while (re2 != -1)
		{
			fill(re1, re2);
			re1++, re2--;
		}
		for (int i = 0; i < vz; i++)
		{
			po2 = 0;
			string f = v[i];
			int idx = 0;
			rep(j, sz)
			{
				if (ss[j] == '?')
				{
					ss[j] = f[idx++];
				}
			}
			rep(j, sz)
			{
				if (ss[j] == '+')
					po2++;
				else
					po2--;
			}
			if (po1 == po2)
				sol++;
			ss = g;
		}
		cout << fixed << setprecision(12);
		all = sol / all;
		cout << all << endl;
	}
	return 0;
}
